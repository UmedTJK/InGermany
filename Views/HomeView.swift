//
//  HomeView.swift
//  InGermany
//

import SwiftUI

struct HomeView: View {
    @State private var articles: [Article] = []
    @State private var categories: [Category] = []

    @ObservedObject var favoritesManager = FavoritesManager()
    @EnvironmentObject private var categoriesStore: CategoriesStore
    @AppStorage("selectedLanguage") private var selectedLanguage: String = "ru"

    var body: some View {
        NavigationView {
            ScrollView {
                VStack(alignment: .leading, spacing: 28) {
                    usefulToolsSection
                    recentlyReadSection
                    favoritesSection

                    // üîπ –ö–∞–∂–¥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã–º –±–ª–æ–∫–æ–º
                    categorySection(title: "–§–∏–Ω–∞–Ω—Å—ã", categoryId: "11111111-1111-1111-1111-aaaaaaaaaaaa")
                    categorySection(title: "–†–∞–±–æ—Ç–∞", categoryId: "22222222-2222-2222-2222-bbbbbbbbbbbb")
                    categorySection(title: "–£—á—ë–±–∞", categoryId: "33333333-3333-3333-3333-cccccccccccc")
                    categorySection(title: "–ë—é—Ä–æ–∫—Ä–∞—Ç–∏—è", categoryId: "44444444-4444-4444-4444-dddddddddddd")
                    categorySection(title: "–ñ–∏–∑–Ω—å", categoryId: "55555555-5555-5555-5555-eeeeeeeeeeee")

                    allArticlesSection
                }
                .padding(.vertical, 16)
            }
            .navigationTitle(getTranslation(key: "–ì–ª–∞–≤–Ω–∞—è", language: selectedLanguage))
            .task {
                articles = await DataService.shared.loadArticles()
                categories = await DataService.shared.loadCategories()
            }
        }
    }

    // MARK: - –ù–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
    private var recentlyReadSection: some View {
        let readArticles = articles
            .filter { ReadingHistoryManager.shared.isRead($0.id) }
            .sorted { ($0.createdAt ?? Date.distantPast) > ($1.createdAt ?? Date.distantPast) }

        return VStack(alignment: .leading, spacing: 12) {
            Text(getTranslation(key: "–ù–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ", language: selectedLanguage))
                .font(.headline)
                .padding(.horizontal)

            if readArticles.isEmpty {
                Text(getTranslation(key: "–ù–µ—Ç —Å—Ç–∞—Ç–µ–π", language: selectedLanguage))
                    .font(.subheadline)
                    .foregroundColor(.secondary)
                    .padding(.horizontal)
            } else {
                ScrollView(.horizontal, showsIndicators: false) {
                    HStack(spacing: 16) {
                        ForEach(readArticles) { article in
                            NavigationLink(
                                destination: ArticleView(
                                    article: article,
                                    allArticles: articles,
                                    favoritesManager: favoritesManager
                                )
                            ) {
                                FavoriteCard(article: article, favoritesManager: favoritesManager)
                                    .environmentObject(categoriesStore)
                            }
                        }
                    }
                    .padding(.horizontal)
                }
            }
        }
    }

    // MARK: - –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
    private var favoritesSection: some View {
        let favs = favoritesManager.favoriteArticles(from: articles)
            .sorted { ($0.createdAt ?? Date.distantPast) > ($1.createdAt ?? Date.distantPast) }

        return VStack(alignment: .leading, spacing: 12) {
            Text(getTranslation(key: "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", language: selectedLanguage))
                .font(.headline)
                .padding(.horizontal)

            if favs.isEmpty {
                Text(getTranslation(key: "–ù–µ—Ç —Å—Ç–∞—Ç–µ–π", language: selectedLanguage))
                    .font(.subheadline)
                    .foregroundColor(.secondary)
                    .padding(.horizontal)
            } else {
                ScrollView(.horizontal, showsIndicators: false) {
                    HStack(spacing: 16) {
                        ForEach(favs) { article in
                            NavigationLink(
                                destination: ArticleView(
                                    article: article,
                                    allArticles: articles,
                                    favoritesManager: favoritesManager
                                )
                            ) {
                                FavoriteCard(article: article, favoritesManager: favoritesManager)
                                    .environmentObject(categoriesStore)
                            }
                        }
                    }
                    .padding(.horizontal)
                }
            }
        }
    }

    // MARK: - –°–µ–∫—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    private func categorySection(title: String, categoryId: String) -> some View {
        let filtered = articles
            .filter { $0.categoryId == categoryId }
            .sorted { ($0.createdAt ?? Date.distantPast) > ($1.createdAt ?? Date.distantPast) }

        return VStack(alignment: .leading, spacing: 12) {
            Text(getTranslation(key: title, language: selectedLanguage))
                .font(.headline)
                .padding(.horizontal)

            if filtered.isEmpty {
                Text(getTranslation(key: "–ù–µ—Ç —Å—Ç–∞—Ç–µ–π", language: selectedLanguage))
                    .font(.subheadline)
                    .foregroundColor(.secondary)
                    .padding(.horizontal)
            } else {
                ScrollView(.horizontal, showsIndicators: false) {
                    HStack(spacing: 16) {
                        ForEach(filtered) { article in
                            NavigationLink(
                                destination: ArticleView(
                                    article: article,
                                    allArticles: articles,
                                    favoritesManager: favoritesManager
                                )
                            ) {
                                FavoriteCard(article: article, favoritesManager: favoritesManager)
                                    .environmentObject(categoriesStore)
                            }
                        }
                    }
                    .padding(.horizontal)
                }
            }
        }
    }

    // MARK: - –í—Å–µ —Å—Ç–∞—Ç—å–∏
    private var allArticlesSection: some View {
        let sorted = articles
            .sorted { ($0.createdAt ?? Date.distantPast) > ($1.createdAt ?? Date.distantPast) }

        return VStack(alignment: .leading, spacing: 12) {
            Text(getTranslation(key: "–í—Å–µ —Å—Ç–∞—Ç—å–∏", language: selectedLanguage))
                .font(.headline)
                .padding(.horizontal)

            if sorted.isEmpty {
                Text(getTranslation(key: "–ù–µ—Ç —Å—Ç–∞—Ç–µ–π", language: selectedLanguage))
                    .font(.subheadline)
                    .foregroundColor(.secondary)
                    .padding(.horizontal)
            } else {
                ScrollView(.horizontal, showsIndicators: false) {
                    HStack(spacing: 16) {
                        ForEach(sorted) { article in
                            NavigationLink(
                                destination: ArticleView(
                                    article: article,
                                    allArticles: articles,
                                    favoritesManager: favoritesManager
                                )
                            ) {
                                FavoriteCard(article: article, favoritesManager: favoritesManager)
                                    .environmentObject(categoriesStore)
                            }
                        }
                    }
                    .padding(.horizontal)
                }
            }
        }
    }

    // MARK: - –ü–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    private var usefulToolsSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text(getTranslation(key: "–ü–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", language: selectedLanguage))
                .font(.headline)
                .padding(.horizontal)

            ScrollView(.horizontal, showsIndicators: false) {
                HStack(spacing: 16) {
                    NavigationLink(destination: MapView()) {
                        ToolButton(icon: "map", title: getTranslation(key: "–ö–∞—Ä—Ç–∞", language: selectedLanguage))
                    }
                    NavigationLink(destination: PDFViewer(fileName: "sample.pdf")) { // ‚Üê –∑–¥–µ—Å—å —É–∫–∞–∂–∏ —Ä–µ–∞–ª—å–Ω—ã–π PDF
                        ToolButton(icon: "doc.richtext", title: getTranslation(key: "PDF –î–æ–∫—É–º–µ–Ω—Ç—ã", language: selectedLanguage))
                    }
                    NavigationLink(destination: RandomArticleView(articles: articles, favoritesManager: favoritesManager)) {
                        ToolButton(icon: "shuffle", title: getTranslation(key: "–°–ª—É—á–∞–π–Ω–∞—è —Å—Ç–∞—Ç—å—è", language: selectedLanguage))
                    }
                }
                .padding(.horizontal)
            }
        }
    }

    // MARK: - UI helper for tools
    private struct ToolButton: View {
        let icon: String
        let title: String

        var body: some View {
            VStack {
                Image(systemName: icon)
                    .font(.largeTitle)
                    .foregroundColor(.blue)
                Text(title)
                    .font(.subheadline)
            }
            .frame(width: 120, height: 100)
            .background(Color(.systemGray6))
            .cornerRadius(12)
        }
    }

    // MARK: - –ü–µ—Ä–µ–≤–æ–¥—ã
    private func getTranslation(key: String, language: String) -> String {
        let translations: [String: [String: String]] = [
            "–ì–ª–∞–≤–Ω–∞—è": ["ru": "–ì–ª–∞–≤–Ω–∞—è", "en": "Home", "de": "Startseite", "tj": "–ê—Å–æ—Å”£"],
            "–§–∏–Ω–∞–Ω—Å—ã": ["ru": "–§–∏–Ω–∞–Ω—Å—ã", "en": "Finance", "de": "Finanzen", "tj": "–ú–æ–ª–∏—è"],
            "–†–∞–±–æ—Ç–∞": ["ru": "–†–∞–±–æ—Ç–∞", "en": "Work", "de": "Arbeit", "tj": "–ö–æ—Ä"],
            "–£—á—ë–±–∞": ["ru": "–£—á—ë–±–∞", "en": "Study", "de": "Studium", "tj": "–¢–∞“≥—Å–∏–ª–æ—Ç"],
            "–ë—é—Ä–æ–∫—Ä–∞—Ç–∏—è": ["ru": "–ë—é—Ä–æ–∫—Ä–∞—Ç–∏—è", "en": "Bureaucracy", "de": "B√ºrokratie", "tj": "–ë—é—Ä–æ–∫—Ä–∞—Ç–∏—è"],
            "–ñ–∏–∑–Ω—å": ["ru": "–ñ–∏–∑–Ω—å", "en": "Life", "de": "Leben", "tj": "–ó–∏–Ω–¥–∞–≥”£"],
            "–í—Å–µ —Å—Ç–∞—Ç—å–∏": ["ru": "–í—Å–µ —Å—Ç–∞—Ç—å–∏", "en": "All Articles", "de": "Alle Artikel", "tj": "“≤–∞–º–∞–∏ –º–∞“õ–æ–ª–∞“≥–æ"],
            "–ù–µ—Ç —Å—Ç–∞—Ç–µ–π": ["ru": "–ù–µ—Ç —Å—Ç–∞—Ç–µ–π", "en": "No articles", "de": "Keine Artikel", "tj": "–ú–∞“õ–æ–ª–∞ –Ω–µ—Å—Ç"],
            "–ü–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã": ["ru": "–ü–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "en": "Useful Tools", "de": "N√ºtzliche Werkzeuge", "tj": "–ê—Å–±–æ–±“≥–æ–∏ –º—É—Ñ–∏–¥"],
            "–ö–∞—Ä—Ç–∞": ["ru": "–ö–∞—Ä—Ç–∞", "en": "Map", "de": "Karte", "tj": "–•–∞—Ä–∏—Ç–∞"],
            "PDF –î–æ–∫—É–º–µ–Ω—Ç—ã": ["ru": "PDF –î–æ–∫—É–º–µ–Ω—Ç—ã", "en": "PDF Documents", "de": "PDF Dokumente", "tj": "“≤—É“∑“∑–∞—Ç“≥–æ–∏ PDF"],
            "–°–ª—É—á–∞–π–Ω–∞—è —Å—Ç–∞—Ç—å—è": ["ru": "–°–ª—É—á–∞–π–Ω–∞—è —Å—Ç–∞—Ç—å—è", "en": "Random Article", "de": "Zuf√§lliger Artikel", "tj": "–ú–∞“õ–æ–ª–∞–∏ —Ç–∞—Å–æ–¥—É—Ñ”£"],
            "–ù–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ": ["ru": "–ù–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ", "en": "Recently Read", "de": "Zuletzt gelesen", "tj": "–ú–∞“õ–æ–ª–∞“≥–æ–∏ –æ—Ö–∏—Ä–∏–Ω"],
            "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ": ["ru": "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", "en": "Favorites", "de": "Favoriten", "tj": "–ò–Ω—Ç–∏—Ö–æ–±—à—É–¥–∞"]
        ]
        return translations[key]?[language] ?? key
    }
}

#Preview {
    HomeView()
        .environmentObject(CategoriesStore.shared)
}
