//
//  Article.swift
//  InGermany
//

import Foundation

// 1. –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ Hashable
struct Article: Identifiable, Codable, Hashable {
    let id: String
    let title: [String: String]
    let content: [String: String]
    let categoryId: String
    let tags: [String]
    let pdfFileName: String?
    
    // 2. –†–µ–∞–ª–∏–∑—É–µ–º Hashable –Ω–∞ –æ—Å–Ω–æ–≤–µ id (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä)
    static func == (lhs: Article, rhs: Article) -> Bool {
        return lhs.id == rhs.id
    }
    
    func hash(into hasher: inout Hasher) {
        hasher.combine(id)
    }
    
    // –ú–µ—Ç–æ–¥—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    func localizedTitle(for language: String) -> String {
        title[language] ?? title["en"] ?? title.values.first ?? "No title"
    }
    
    func localizedContent(for language: String) -> String {
        content[language] ?? content["en"] ?? content.values.first ?? "No content"
    }
}

// üîπ –ü—Ä–∏–º–µ—Ä —Å—Ç–∞—Ç—å–∏ –¥–ª—è –ø—Ä–µ–≤—å—é
extension Article {
    static let sampleArticle: Article = Article(
        id: "11111111-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
        title: [
            "ru": "–§–∏–Ω–∞–Ω—Å—ã –≤ –ì–µ—Ä–º–∞–Ω–∏–∏",
            "en": "Finance in Germany"
        ],
        content: [
            "ru": "–í—Å–µ –æ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö –∏ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ",
            "en": "All about finance and the banking system"
        ],
        categoryId: "11111111-1111-1111-1111-aaaaaaaaaaaa",
        tags: ["—Ñ–∏–Ω–∞–Ω—Å—ã", "–±–∞–Ω–∫"],
        pdfFileName: "Test_Document"
    )
}
